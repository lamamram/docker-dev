---

networks:
  # exemple d'utilisation de réseau préexistant à la "stack" courante pour usage
  # traefik: => reverse proxy / ingress controller + virtualhost
  #   external: true
  stack-php:
    # fixer le nom
    name: stack-php
    driver: bridge
    # Internet Protocol Adress Management
    ipam:
      config:
        - subnet: 172.18.0.0/24
          gateway: 172.18.0.1

# déclarer les volumes nommés!!!
volumes:
  db_data:
    name: db_data
  nfs-vol-db:
    name: nfs-vol-db
    # les éléments du serveur NFS sont téléchargés dans l'emplacement local (/var/lib/docker/volumes/...)
    driver: local
    # configuraiton du volumes dépendent de la technologie attendues
    driver_opts:
      type: nfs
      # nomenclature NFS
      o: addr=docker.lan,ro
      device: :/mnt/nfs-dir/initdb.d
  nfs-vol-php:
    name: nfs-vol-php
    driver: local
    driver_opts:
      type: nfs
      o: addr=docker.lan,ro
      device: :/mnt/nfs-dir/app
  nfs-vol-web:
    name: nfs-vol-web
    driver: local
    driver_opts:
      type: nfs
      o: addr=docker.lan,ro
      device: :/mnt/nfs-dir/nginx-conf.d

# service = ensemble de replicas (réplications) d'une config. de conteneur, dispatchés dans l'infra
services:
  # nom des services
  db:
    # radical des noms des replicas
    container_name: stack-php-mariadb
    image: mariadb:11.7-ubi
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - stack-php
    volumes:
      # - ./mariadb-init.sql:/docker-entrypoint-initdb.d/mariadb-init.sql:ro
      - nfs-vol-db:/docker-entrypoint-initdb.d:ro
      - db_data:/var/lib/mysql
    profiles:
      # arbitraire
      - run
    
  php:
    container_name: stack-php-fpm
    image: bitnami/php-fpm:8.4-debian-12
    restart: unless-stopped
    networks:
      - stack-php
    volumes:
      # - ./index.php:/srv/index.php:ro
      - nfs-vol-php:/srv:ro
    depends_on:
      - db
    profiles:
      - run
  
  web:
    container_name: stack-php-nginx
    image: nginx:1.27.4-bookworm
    restart: unless-stopped
    networks:
      - stack-php
    volumes:
      # - ./vhost.conf:/etc/nginx/conf.d/vhost.conf:ro
      - nfs-vol-web:/etc/nginx/conf.d:ro
    ports:
      - 8080:80
    depends_on:
      - php
    profiles:
      - run

#### Tâches d'administration #####
  # à exécuter avec docker compose run --rm <service_name>

  # backup à froid => en dehors des conteneurs, en utilisant uniquement le volume db_data
  # 1. on accroche le volume db_data dans note service backup
  # 2. on comprime le dossier des bdds en tar.gz
  # 3. je fais sortir l'archive avec un bind mount 
  backup:
    image: alpine:3.21
    # pas besoin de réseaux
    network_mode: none
    volumes:
      # /data est créé à la volée !!!
      - db_data:/data:ro
      # les deux dossiers dump côté host et conteneurs sont créés à la volée !!!
      - ./dump:/dump
    # écriture "tokenisée" => utilise la compatibilité entre YAML et JSON
    command: ["tar", "-cvzf", "/dump/dump.tar.gz", "/data"]
    profiles:
      - task
  hot_backup:
    image: alpine:3.21
    networks:
      - stack-php
    # accroche auto. tous les volumes d'un conteneur donné
    volumes_from:
      - db
    volumes:
      - ./dump:/dump
    command: ["tar", "-cvzf", "/dump/dump.tar.gz", "/var/lib/mysql"]
    # a besoin du profile run !!!
    depends_on:
      - db
    profiles:
      - task